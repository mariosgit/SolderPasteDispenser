var t,e,s={};!function(){var t={};function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var s=0;s<e.length;s++){var i=e[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var o=function(){function t(s,i){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"gray",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"16px Monospace",r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;e(this,t),this.x=r,this.y=l,this.ctx=s,this.canvas=i,this.color=o,this.font=n,this.setPos=this.setPos.bind(this)}return function(t,e,s){e&&i(t.prototype,e),s&&i(t,s)}(t,[{key:"track",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],e=this.canvas;return t?e.addEventListener("mousemove",this.setPos):e.removeEventListener("mousemove",this.setPos),this}},{key:"setPos",value:function(t){var e=this.canvas.getBoundingClientRect();return this.x=Math.floor(t.clientX-e.left),this.y=Math.floor(t.clientY-e.top),this}},{key:"draw",value:function(){var t=this.x,e=this.y,s=this.canvas,i=this.ctx,o=this.font,n=this.color,r="X: ".concat(t,", Y: ").concat(e);i.save(),i.fillStyle=n,i.font=o;var l=t<s.width/2?20:-i.measureText(r).width-20,h=e<s.height/2?25:-18;return i.fillText(r,this.x+l,this.y+h),i.restore(),this}}]),t}();function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){for(var s=0;s<e.length;s++){var i=e[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function l(t,e,s){return e&&r(t.prototype,e),s&&r(t,s),t}var h=function(){function t(e,s,i,o,r,l){n(this,t),this.color=e,this.lineWidth=s,this.startX=i,this.startY=o,this.endX=r,this.endY=l}return l(t,[{key:"draw",value:function(t){var e=this.color,s=this.lineWidth,i=this.startX,o=this.startY,n=this.endX,r=this.endY;t.save(),t.beginPath(),t.strokeStyle=e,t.lineWidth=s,t.moveTo(i,o),t.lineTo(n,r),t.stroke(),t.restore()}}]),t}(),a=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"gray",s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.3,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:5,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"DarkGray",l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:.5,h=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"16px Monospace";n(this,t),this.color=e,this.lineWidth=s,this.step=i,this.boldNth=o,this.boldColor=r,this.boldWidth=l,this.font=h,this.lines=null}return l(t,[{key:"createLines",value:function(t){for(var e=this.color,s=this.lineWidth,i=this.step,o=this.boldNth,n=this.boldColor,r=this.boldWidth,l=[],a=o*i,c=0;c<t.width;c+=i){var d=c%a==0;l.push(d?new h(n,r,c,0,c,t.height):new h(e,s,c,0,c,t.height))}for(var u=0;u<t.height;u+=i){var m=u%a==0;l.push(m?new h(n,r,0,u,t.width,u):new h(e,s,0,u,t.width,u))}this.lines=l}},{key:"drawText",value:function(t,e){var s=this.step,i=this.boldNth,o=this.boldColor,n=this.font;t.save(),t.font=n,t.fillStyle=o,t.fillText("0",1,15);for(var r=s*i;r<e.width;r+=s*i)t.fillText(r,r,15);for(var l=s*i;l<e.height;l+=s*i)t.fillText(l,0,l+15);t.restore()}},{key:"draw",value:function(t,e){this.lines||this.createLines(e),this.lines.forEach((function(e){return e.draw(t)})),this.drawText(t,e)}}]),t}();t.Mouse=o,t.Grid=a,s=t}();class i{}class o{constructor(t,e,s){this.obj=t,this.left=null,this.right=null,this.parent=s,this.dimension=e}}class t{constructor(t,e,s,i){this._kdTreeObjectType=t,this.points=e,this.metric=s,this.dimensions=i,Array.isArray(e)?this.root=this.buildTree(e,0,null):this.loadTree(e)}buildTree(t,e,s){var i,n,r=e%this.dimensions.length;if(0===t.length)return null;if(1===t.length)return new o(t[0],r,s);for(t.sort(((t,e)=>t[this.dimensions[r]]-e[this.dimensions[r]])),i=Math.floor(t.length/2);i>0;){let e=i-1;if(t[i][this.dimensions[r]]!==t[e][this.dimensions[r]])break;i-=1}return(n=new o(t[i],r,s)).left=this.buildTree(t.slice(0,i),e+1,n),n.right=this.buildTree(t.slice(i+1),e+1,n),n}loadTree(t){this.root=t,function t(e){e.left&&(e.left.parent=e,t(e.left)),e.right&&(e.right.parent=e,t(e.right))}(this.root)}toJSON(t=this.root){if(null===t)return null;var e=new o(t.obj,t.dimension,null);return t.left&&(e.left=this.toJSON(t.left)),t.right&&(e.right=this.toJSON(t.right)),e}toArray(t=this.root){let e=[];return null===t||(t.left&&(e.push(t.left.obj),e=[...e,...this.toArray(t.left)]),t.right&&(e.push(t.right.obj),e=[...e,...this.toArray(t.right)])),e}innerSearch(t,e,s){if(null===e)return s;var i=this.dimensions[e.dimension];return t[i]<e.obj[i]?this.innerSearch(t,e.left,e):this.innerSearch(t,e.right,e)}insert(t){var e,s,i=this.innerSearch(t,this.root,null);null!==i?(e=new o(t,(i.dimension+1)%this.dimensions.length,i),t[s=this.dimensions[i.dimension]]<i.obj[s]?i.left=e:i.right=e):this.root=new o(t,0,null)}nodeSearch(t,e){if(null===e)return null;if(e.obj===t)return e;this.metric(e.obj,t);var s=this.dimensions[e.dimension];return t[s]<e.obj[s]?this.nodeSearch(t,e.left):this.nodeSearch(t,e.right)}findMin(t,e){var s,i,o,n,r;return null===t?null:(s=this.dimensions[e],t.dimension===e?null!==t.left?this.findMin(t.left,e):t:(i=t.obj[s],o=this.findMin(t.left,e),n=this.findMin(t.right,e),r=t,null!==o&&o.obj[s]<i&&(r=o),null!==n&&n.obj[s]<r.obj[s]&&(r=n),r))}findMax(t,e){var s,i,o,n=null,r=null;return s=this.dimensions[e],t.dimension===e?null!==t.left?this.findMax(t.left,e):t:(i=t.obj[s],t.left&&(n=this.findMax(t.left,e)),t.right&&(r=this.findMax(t.right,e)),o=t,null!==n&&n.obj[s]>i&&(o=n),null!==r&&r.obj[s]>o.obj[s]&&(o=r),o)}removeNode(t){var e,s,i;if(null!==t)return null===t.left&&null===t.right?null===t.parent?void(this.root=null):(i=this.dimensions[t.parent.dimension],void(t.obj[i]<=t.parent.obj[i]?t.parent.left=null:t.parent.right=null)):void(null!==t.right?(s=(e=this.findMin(t.right,t.dimension)).obj,this.removeNode(e),t.obj=s):null!==t.left&&(s=(e=this.findMin(t.left,t.dimension)).obj,this.removeNode(e),t.right=t.left,t.left=null,t.obj=s))}remove(t){var e;if(null===(e=this.nodeSearch(t,this.root)))return console.warn("kdTree:remove:kack'n'shit"),!1;const s=this.toArray(e);let i=this.buildTree(s,e.dimension,e.parent);return e.parent?e.parent.left===e?e.parent.left=i:e.parent.right===e&&(e.parent.right=i):this.root=i,!0}nearestSearch(t,e){let s,i=this.dimensions[e.dimension],o=this.metric(t.point,e.obj),n=new this._kdTreeObjectType;var r;let l,h;const a=(e,s)=>{t.bestNodes.push([e,s]),t.bestNodes.size()>t.maxNodes&&t.bestNodes.pop()};for(h=0;h<this.dimensions.length;h+=1)h===e.dimension?n[this.dimensions[h]]=t.point[this.dimensions[h]]:n[this.dimensions[h]]=e.obj[this.dimensions[h]];r=this.metric(n,e.obj),null!==e.right||null!==e.left?(s=null===e.right?e.left:null===e.left?e.right:t.point[i]<e.obj[i]?e.left:e.right,this.nearestSearch(t,s),(t.bestNodes.size()<t.maxNodes||o<t.bestNodes.peek()[1])&&a(e,o),(t.bestNodes.size()<t.maxNodes||Math.abs(r)<t.bestNodes.peek()[1])&&(l=s===e.left?e.right:e.left,null!==l&&this.nearestSearch(t,l))):(t.bestNodes.size()<t.maxNodes||o<t.bestNodes.peek()[1])&&a(e,o)}nearest(t,s,i){let o,n,r=[];if(n=new e((t=>-t[1])),i)for(console.log("kdTree:nearest, maxnodes",s),o=0;o<s;o+=1)n.push([null,i]);for(this.root&&this.nearestSearch({point:t,bestNodes:n,maxNodes:s},this.root),r=[],o=0;o<Math.min(s,n.content.length);o+=1)n.content[o][0]&&r.push([n.content[o][0].obj,n.content[o][1]]);return r}balanceFactor(){const t=e=>null===e?0:Math.max(t(e.left),t(e.right))+1,e=t=>null===t?0:e(t.left)+e(t.right)+1;return t(this.root)/(Math.log(e(this.root))/Math.log(2))}}class e{constructor(t){this.content=[],this.scoreFunction=t}push(t){this.content.push(t),this.bubbleUp(this.content.length-1)}pop(){var t=this.content[0],e=this.content.pop();return e&&this.content.length>0&&(this.content[0]=e,this.sinkDown(0)),t}peek(){return this.content[0]}remove(t){for(var e=this.content.length,s=0;s<e;s++)if(this.content[s]==t){var i=this.content.pop();return void(i&&s!=e-1&&(this.content[s]=i,this.scoreFunction(i)<this.scoreFunction(t)?this.bubbleUp(s):this.sinkDown(s)))}throw new Error("kdNode not found.")}size(){return this.content.length}bubbleUp(t){for(var e=this.content[t];t>0;){var s=Math.floor((t+1)/2)-1,i=this.content[s];if(!(this.scoreFunction(e)<this.scoreFunction(i)))break;this.content[s]=e,this.content[t]=i,t=s}}sinkDown(t){for(var e=this.content.length,s=this.content[t],i=this.scoreFunction(s);;){var o=2*(t+1),n=o-1,r=null;if(n<e){var l=this.content[n],h=this.scoreFunction(l);h<i&&(r=n)}if(o<e){var a=this.content[o];this.scoreFunction(a)<(null==r?i:h)&&(r=o)}if(null==r)break;this.content[t]=this.content[r],this.content[r]=s,t=r}}}class n{inputLast="";inputQueue=[];constructor(){this.deviceCheck=document.getElementById("deviceCheck"),this.deviceConnect=document.getElementById("deviceConnect"),this.deviceDisconnect=document.getElementById("deviceDisconnect"),this.deviceInput=document.getElementById("deviceInput"),this.deviceInputForm=document.getElementById("deviceInputForm"),this.deviceInfo=document.getElementById("deviceInfo"),this.deviceLog=document.getElementById("deviceLog"),this.deviceSerial=document.getElementById("deviceSerial"),this.port=null,this.textDecoder=new TextDecoderStream,this.deviceCheck&&this.deviceConnect&&this.deviceDisconnect&&this.deviceInput&&this.deviceInputForm&&(this.deviceCheck.onclick=this.serialCheck.bind(this),this.deviceConnect.onclick=this.serialConnect.bind(this),this.deviceDisconnect.onclick=this.serialDisconnect.bind(this),this.deviceInputForm.onsubmit=this.serialInputForm.bind(this)),this.serialCheck()}async serialConnect(){navigator.serial.requestPort().then((t=>{console.log("serialConnect",t),this.serialPortOpen(t)})).catch((t=>{this.serialError(t)}))}async serialConnectDevice(t,e){for(let s of this.ports){console.log("serialConnectDevice: serial available, ports: ",s.getInfo());const{usbProductId:i,usbVendorId:o}=s.getInfo();if(i==e&&o==t){this.serialPortOpen(s);break}}}async serialDisconnect(){this.port&&this.port.close().then((()=>{this.port=null,console.log("port closed")})).catch((t=>{console.warn(t)}))}async serialWriteWait(t,e=1e4){return this.inputQueue=[],new Promise((async(s,i)=>{if(this.port)try{this.serialWrite(t);let o=!1;const n=10;let r=e;for(;!(o||(o=await this.serialAvail(n),r-=n,r<=0)););if(this.inputQueue.length>0){s(this.inputQueue.pop())}else i("timeout")}catch(t){i("busy")}else i("disconnected")}))}serialInputForm(t){this.deviceInput&&(t.preventDefault(),this.serialInputChange(t))}async serialInputChange(t){if(this.deviceInput)if(this.port){let t=this.deviceInput.value;t.length>0&&this.serialWrite(t)}else console.warn("serialInputChange - no port open")}async serialCheck(){let t=!1;return"serial"in navigator?(this.updatePorts(),navigator.serial.addEventListener("connect",(t=>{console.log("serialCheck:connect",t),this.updatePorts()})),navigator.serial.addEventListener("disconnect",(t=>{console.log("serialCheck:disconnect",t)})),t=!0):this.serialError("This browser does not support the serial port. Connection to device impossible! Use Chrome!"),t}updatePorts(){navigator.serial.getPorts().then((t=>{console.log("updatePorts:",t),this.ports=t;let e="";for(let s of t){console.log("serial available, ports: ",s.getInfo());const{usbProductId:t,usbVendorId:i}=s.getInfo();console.log(`updatePorts port pid:${t} vid:${i}`),e+=`<div class="w3-container"><i class="fa-solid fa-microchip"></i> pid:${t} vid:${i} <button class="w3-btn w3-round w3-light-grey w3-tiny" id="${i}-${t}"><i class="fa fa-plug"></i> connect </button></div>`}if(this.deviceInfo){this.deviceInfo.innerHTML=e;const t=this.deviceInfo.getElementsByTagName("button");for(const e of t)e.onclick=()=>{const t=e.id.split("-");console.log(t),this.serialConnectDevice(parseInt(t[0]),parseInt(t[1]))}}!this.deviceConnect||null!=this.ports&&0!=this.ports.length||(this.deviceConnect.className=this.deviceConnect.className.replace("w3-hide","w3-show"))}))}serialPortOpen(t){t.onconnect=()=>{console.log("CONNECTED")},t.ondisconnect=()=>{console.log("DISCONNECTED"),this.onSerialDisconnected&&this.onSerialDisconnected()},t.open({baudRate:25e4}).then((e=>{this.port=t,this.deviceLog&&(this.deviceLog.innerHTML="connected<br>"),console.log("port opened ? ",this.port),this.onSerialConnected&&this.onSerialConnected(),setTimeout(this.serialRead.bind(this),0)})).catch((t=>{this.serialError(t.toString())}))}serialError(t){console.warn("serialError",t),this.deviceLog&&(this.deviceLog.innerHTML=`<span class="w3-red">${t}</span><br>`)}async serialRead(){if(this.port){this.port.readable.pipeTo(this.textDecoder.writable);this.reader=this.textDecoder.readable.getReader(),setTimeout(this.serialReadon.bind(this),1)}}async serialReadon(){try{const{value:t,done:e}=await this.reader.read();if(e)this.reader.releaseLock(),console.log("serialRead - done");else{let e=!1;if(-1!=t.indexOf("\n")){const s=t.split("\n");s.length<=1&&console.error("Assertion failed ",s);for(let t=0;t<s.length-1;t++)this.inputLast+=s[t],this.inputQueue.push(this.inputLast),this.serialLog(this.inputLast,!0),this.inputLast="",e=!0;this.inputLast=s[s.length-1]}else this.inputLast+=t;e&&setTimeout(this.serialCallback.bind(this),5),setTimeout(this.serialReadon.bind(this),1)}}catch(t){console.warn(t),this.serialError(t.toString())}}serialCallback(){}async serialWrite(t){this.serialLog(t,!1);let e=new TextEncoder;const s=this.port.writable.getWriter();await s.write(e.encode(`${t}\n`)),s.releaseLock()}serialAvail(t=10){return new Promise((e=>{this.inputQueue.length>0?e(!0):setTimeout((()=>{e(!1)}),t)}))}serialLog(t,e){if(this.deviceSerial){for(;this.deviceSerial.childElementCount>20;){let t=this.deviceSerial.firstChild;t&&this.deviceSerial.removeChild(t)}this.deviceSerial.innerHTML+=e?`<div><i class="fa-solid fa-arrow-right-to-bracket"></i> ${t}</div>`:`<div><i class="fa-solid fa-arrow-up-right-from-square"></i> ${t}</div>`,globalThis.resize()}}}class r{minx=99999;miny=99999;maxx=-99999;maxy=-99999;constructor(){}updateFromPad(t){this.update(t.posX,t.posY)}update(t,e){t<this.minx&&(this.minx=t),e<this.miny&&(this.miny=e),t>this.maxx&&(this.maxx=t),e>this.maxy&&(this.maxy=e)}center(t=1){return[(this.minx+(this.maxx-this.minx)/2)*t,(this.miny+(this.maxy-this.miny)/2)*t]}zero(t=1){return[this.minx*t,this.miny*t]}size(t=1){return[(this.maxx-this.minx)*t,(this.maxy-this.miny)*t]}diagonal(t=1){const e=this.size(t);return Math.sqrt(e[0]*e[0]+e[1]*e[1])}inside(t){return t.posX>=this.minx&&t.posX<=this.maxx&&t.posY>=this.miny&&t.posY<=this.maxy}}class l{constructor(t,e,s){this.form=t,this.width=e,this.height=s}}class h{constructor(t,e,s){this.posX=e,this.posY=s,this.style=t}asTuple(){return[this.posX,this.posY]}}class a extends i{fileName="";mouseFlag=!1;mouseStartX=0;mouseStartY=0;mouseOffX=0;mouseOffY=0;zoom=5;nearest=[];constructor(){super(),this.mapStyles=new Map,this.mapPads=new Map,this.bbPcb=new r,this.bbZero=new r,this.bbSelection=new r}setCanvas(t,e){this.ctx=t,this.canvas=e}setZero(){let t=!1;this.bbZero=this.bbSelection,t=!0,console.log(`Pcb:setZero: ${this.bbZero.zero()}`)}getZero(){return this.bbZero.zero()}getSelected(){let t=[];for(let e of this.nearest)e.length>0&&t.push(e[0]);return t}getSelectedZero(){return this.bbSelection.zero()}getPadCount(){let t=0;for(let e of this.mapPads)t+=e[1].size;return t}zoomToFit(t){let e=this.bbPcb.size(),s=t[0]/e[0],i=t[1]/e[1];this.zoom=.9*(s>i?i:s),console.log(`Pcb:zoomToFit zoom ${this.zoom}`,e),this.center()}center(){this.canvas&&(this.mouseOffX=-this.bbPcb.center()[0]*this.zoom+this.canvas.width/2,this.mouseOffY=-this.bbPcb.center()[1]*this.zoom+this.canvas.height/2)}addPadStyle(t,e,s,i){this.mapStyles.set(t,new l(e,s,i))}addPad(t,e,s){this.mapPads.has(t)||this.mapPads.set(t,new Set);let i=this.mapPads.get(t);if(i){const o=new h(t,e,s);i.add(o),this.bbPcb.update(e,s)}}retree(){try{let e=[];for(let t of this.mapPads.values())for(let s of t)e.push(s);this.tree=new t(a,e,a.distance,["posX","posY"]),console.log("tree bf:",this.tree.balanceFactor())}catch(t){console.error(t)}}mouseDown(t){const e=this.ctx.getTransform();if(0==t.button){const s=(t.clientX*e.a-this.mouseOffX)/this.zoom,i=(this.canvas.height-(t.clientY-this.canvas.offsetTop)-this.mouseOffY)/this.zoom;this.mouseStartX=s,this.mouseStartY=i,this.mouseSelectX=s,this.mouseSelectY=i,this.mouseSelect=!0}0!=t.button&&(this.mouseStartX=t.clientX*e.a-this.mouseOffX,this.mouseStartY=t.clientY*e.d-this.mouseOffY,this.mouseFlag=!0)}mouseUp(t){const e=this.ctx.getTransform();if(0!=t.button&&(this.mouseFlag=!1),0==t.button){this.mouseSelect=!1;const s=(t.clientX*e.a-this.mouseOffX)/this.zoom,i=(this.canvas.height-(t.clientY-this.canvas.offsetTop)-this.mouseOffY)/this.zoom;this.mouseSelectX=s,this.mouseSelectY=i,this.bbSelection=new r,this.bbSelection.update(this.mouseStartX,this.mouseStartY),this.bbSelection.update(this.mouseSelectX,this.mouseSelectY);let o=new h("",this.bbSelection.center()[0],this.bbSelection.center()[1]);if(this.tree){let e=[],s=this.bbSelection.diagonal();if(s<.1)e=this.tree.nearest(o,1,s),this.nearest=e;else{s=s/2*(s/2),e=this.tree.nearest(o,this.getPadCount(),s),t.shiftKey||(this.nearest=[]);for(const t of e)this.bbSelection.inside(t[0])&&this.nearest.push(t)}let i=new r;for(const t of this.nearest)i.updateFromPad(t[0]);this.bbSelection=i,console.log(`Pcb:mouseUp selection found #${e.length}`)}}}mouseMove(t){const e=this.ctx.getTransform();if(this.mouseFlag&&(this.mouseOffX=t.clientX*e.a-this.mouseStartX,this.mouseOffY=t.clientY*e.d-this.mouseStartY),this.mouseSelect){const s=(t.clientX*e.a-this.mouseOffX)/this.zoom,i=(this.canvas.height-(t.clientY-this.canvas.offsetTop)-this.mouseOffY)/this.zoom;this.mouseSelectX=s,this.mouseSelectY=i}}mouseWheel(t){this.ctx.getTransform();t.deltaY>0?this.zoom*=1.1:this.zoom*=.9}mouseOut(t){}static distance(t,e){return(t.posX-e.posX)*(t.posX-e.posX)+(t.posY-e.posY)*(t.posY-e.posY)}draw(){this.ctx.fillStyle="antiquewhite",this.ctx.strokeStyle="red";let t=this.bbPcb.center(this.zoom);this.ctx.beginPath(),this.ctx.moveTo(t[0]-10+this.mouseOffX,t[1]+this.mouseOffY),this.ctx.lineTo(t[0]+10+this.mouseOffX,t[1]+this.mouseOffY),this.ctx.moveTo(t[0]+this.mouseOffX,t[1]-10+this.mouseOffY),this.ctx.lineTo(t[0]+this.mouseOffX,t[1]+10+this.mouseOffY),this.ctx.stroke(),this.ctx.beginPath(),this.ctx.rect(this.bbPcb.zero(this.zoom)[0]+this.mouseOffX,this.bbPcb.zero(this.zoom)[1]+this.mouseOffY,this.bbPcb.size(this.zoom)[0],this.bbPcb.size(this.zoom)[1]),this.ctx.stroke();for(let t of this.mapPads.keys()){const e=this.mapStyles.get(t),s=this.mapPads.get(t);if(e&&s){const t=e.width*this.zoom,i=e.height*this.zoom;for(let o of s.values())if("R"==e.form||"O"==e.form||"RoundRect"==e.form)this.ctx.beginPath(),this.ctx.fillRect(o.posX*this.zoom-t/2+this.mouseOffX,o.posY*this.zoom-i/2+this.mouseOffY,t,i),this.ctx.fill();else{if("C"!=e.form){console.log(`draw quatsch ${e.form}`);break}this.ctx.beginPath(),this.ctx.ellipse(o.posX*this.zoom+this.mouseOffX,o.posY*this.zoom+this.mouseOffY,t/2,t/2,0,0,2*Math.PI),this.ctx.fill()}}}this.ctx.strokeStyle="purple",this.ctx.beginPath();let e=.5;for(const t of this.nearest)this.ctx.moveTo((t[0].posX-e)*this.zoom+this.mouseOffX,t[0].posY*this.zoom+this.mouseOffY),this.ctx.lineTo((t[0].posX+e)*this.zoom+this.mouseOffX,t[0].posY*this.zoom+this.mouseOffY),this.ctx.moveTo(t[0].posX*this.zoom+this.mouseOffX,(t[0].posY+e)*this.zoom+this.mouseOffY),this.ctx.lineTo(t[0].posX*this.zoom+this.mouseOffX,(t[0].posY-e)*this.zoom+this.mouseOffY);this.ctx.stroke();let s=[0,0];this.bbSelection&&(e=2*this.zoom,s=this.bbSelection.zero(this.zoom),this.ctx.beginPath(),this.ctx.moveTo(s[0]-e+this.mouseOffX,s[1]+this.mouseOffY),this.ctx.lineTo(s[0]+e+this.mouseOffX,s[1]+this.mouseOffY),this.ctx.moveTo(s[0]+this.mouseOffX,s[1]-e+this.mouseOffY),this.ctx.lineTo(s[0]+this.mouseOffX,s[1]+e+this.mouseOffY),this.ctx.stroke()),this.ctx.strokeStyle="black",s=this.bbZero.center(this.zoom),this.ctx.beginPath(),this.ctx.moveTo(-e+this.mouseOffX,this.mouseOffY),this.ctx.lineTo(+e+this.mouseOffX,this.mouseOffY),this.ctx.moveTo(this.mouseOffX,-e+this.mouseOffY),this.ctx.lineTo(this.mouseOffX,+e+this.mouseOffY),this.ctx.stroke(),this.ctx.strokeStyle="black",s=this.bbZero.zero(this.zoom),this.ctx.beginPath(),this.ctx.moveTo(s[0]-e+this.mouseOffX,s[1]+this.mouseOffY),this.ctx.lineTo(s[0]+e+this.mouseOffX,s[1]+this.mouseOffY),this.ctx.moveTo(s[0]+this.mouseOffX,s[1]-e+this.mouseOffY),this.ctx.lineTo(s[0]+this.mouseOffX,s[1]+e+this.mouseOffY),this.ctx.stroke(),this.mouseSelect&&(this.ctx.strokeStyle="purple",this.ctx.beginPath(),this.ctx.moveTo(this.mouseStartX*this.zoom+this.mouseOffX,this.mouseStartY*this.zoom+this.mouseOffY),this.ctx.lineTo(this.mouseSelectX*this.zoom+this.mouseOffX,this.mouseStartY*this.zoom+this.mouseOffY),this.ctx.lineTo(this.mouseSelectX*this.zoom+this.mouseOffX,this.mouseSelectY*this.zoom+this.mouseOffY),this.ctx.lineTo(this.mouseStartX*this.zoom+this.mouseOffX,this.mouseSelectY*this.zoom+this.mouseOffY),this.ctx.lineTo(this.mouseStartX*this.zoom+this.mouseOffX,this.mouseStartY*this.zoom+this.mouseOffY),this.ctx.stroke())}}let c;var d;(d=c||(c={}))[d.Undefined=1]="Undefined",d[d.Ready=2]="Ready",d[d.Busy=3]="Busy",d[d.NC=4]="NC";class u{constructor(t){this.pcb=t}}class m extends u{reNumFormat=/^%FSLAX([0-9])([0-9])Y([0-9])([0-9])[*]%/;reMatchPad=/^(%AD)(D[0-9]+)([A-Za-z]+)[,]([-0-9.]+)[X]?([-0-9.]+)?[X]?([-0-9.]+)?/;reMatchPadCoordInit=/^([DG][0-9]+)[*]/;reMatchPadCoord=/^X([-]?)([0-9]+)Y([-]?)([0-9]+)D([0-9]+)[*]/;_cancel=!1;floatFracts=1;floatDezis=1;lastPad="";constructor(t){super(t)}parseFile(t){return new Promise((e=>{t.arrayBuffer().then((t=>{var s,i,o,n;s="UTF-8",i=t=>{this.processGerberText(t).finally((()=>{e()}))},o=new Blob([t],{type:"text/plain"}),(n=new FileReader).onload=t=>{t.target&&i(t.target.result)},n.readAsText(o,s)}))}))}cancel(){this._cancel=!0}async processGerberText(t){const e=(t=t.replace(/\r/g,"")).split("\n");let s=1;for(let t of e){if(s++,this._cancel){this._cancel=!1;break}await this.processGerberLine(t),this.processCB&&this.processCB(100*s/e.length)}this.pcb.retree()}async processGerberLine(t){return new Promise((e=>{const s=this.reNumFormat.exec(t);s&&(this.floatDezis=parseInt(s[1]),this.floatFracts=parseInt(s[2]),console.log(`gerber: float digits = ${this.floatDezis} ${this.floatFracts}`));const i=this.reMatchPad.exec(t);i&&(this.padsField&&(this.padsField.innerHTML+=`${i[2]} ${i[3]} ${i[4]} ${i[5]}<br>`),"RoundRect"==i[3]?this.pcb.addPadStyle(i[2],i[3],Math.abs(parseFloat(i[5])),Math.abs(parseFloat(i[6]))):this.pcb.addPadStyle(i[2],i[3],parseFloat(i[4]),parseFloat(i[5])));const o=this.reMatchPadCoordInit.exec(t);o&&(this.lastPad=o[1]);const n=this.reMatchPadCoord.exec(t);if(n)if(this.lastPad.startsWith("D")){let t=n[2],e=n[4];const s=this.floatDezis+this.floatFracts;for(;t.length<s;)t=`0${t}`;for(;e.length<s;)e=`0${e}`;let i=0,o=0;t=`${t.substring(0,this.floatDezis)}.${t.substring(this.floatDezis)}`,e=`${e.substring(0,this.floatDezis)}.${e.substring(this.floatDezis)}`,i=parseFloat(t),o=parseFloat(e),"-"==n[1]&&(i*=-1),"-"==n[3]&&(o*=-1),this.coordsField&&(this.coordsField.innerHTML+=`${this.lastPad}:  x:${i} y:${o} <br>`),this.pcb.addPad(this.lastPad,i,o)}else console.log(`ignoring ${this.lastPad}`);this.pcb.center(),setTimeout(e,0)}))}}const f=document.getElementsByTagName("body")[0],g=document.getElementById("messageElem"),b=document.getElementById("uploadButton"),p=document.getElementById("padsField"),v=document.getElementById("Coords"),w=document.getElementById("coordsField"),y=document.getElementById("dropZone"),x=document.getElementById("canvas"),T=document.getElementById("debug"),S=document.getElementById("progress"),P=document.getElementById("progressbar"),B=document.getElementById("contextMenu"),z=document.getElementById("progressCancel"),k=document.getElementById("menuSetZero"),X=document.getElementById("menuMoveTo"),Y=document.getElementById("menuMoveAll"),O=document.getElementById("menuBlob"),E=document.getElementById("main"),C=document.getElementById("openSidebar"),I=document.getElementsByTagName("header")[0],M=document.getElementById("footer");let N,D,W,F,L=null,$=new class extends n{zero=[0,0];constructor(){super(),this.marlinDiv=document.getElementById("Marlin"),this.initHtml()}setZero(t){this.zero=t,this.onBtnAbs().then((()=>{this.serialWriteWait("G92 X0 Y0 Z0").then((()=>{this.onBtnPos()}))}))}moveTo(t,e,s,i){let o="G0 ";null!=t&&(o+=`X${t-this.zero[0]} `),null!=e&&(o+=`Y${e-this.zero[1]} `),null!=s&&(o+=`Z${s} `),this.serialWriteWait(o).then((()=>{this.onBtnPos()}))}async moveToAll(e,s){console.log("Marlin:moveToAll",e.length),console.log(e);const i=new t(a,e,a.distance,["posX","posY"]);let o=new h("",s[0],s[1]),n=i.nearest(o,1),r=n[0][0],l=[];this.onBtnAbs().then((async()=>{try{for(let t=0;t<e.length;t++){n=i.nearest(r,1),r=n[0][0],l.push(r);let t="G0 ";t+=`X${r.posX-this.zero[0]} `,t+=`Y${r.posY-this.zero[1]} `;try{await this.serialWriteWait(t)}catch(t){}i.remove(r)||console.warn("Marlin:moveToAll NOT removed pad, thas bad :(",r)}for(let t of l)console.log("Marlin:moveToAll",t)}catch(t){console.warn("Marlin:moveToAll: failed",t)}}))}blob(){this.onBtnAbs().then((()=>{this.serialWriteWait("M83").then((()=>{this.serialWriteWait("G0 Z3").then((()=>{this.serialWriteWait("G0 E10").then((()=>{this.serialWriteWait("G0 Z0").then((()=>{this.serialWriteWait("G0 Z3")}))}))}))}))}))}onSerialConnected(){console.log("Marlin: onSerialConnected"),this.setStatus(c.Ready),this.marlinDivStatus&&this.marlinDivCommands&&(this.setStatus(c.Ready),this.marlinDivCommands.className=this.marlinDivCommands.className.replace("w3-hide","w3-show")),setTimeout((()=>{this.onBtnCold().then((()=>{this.onBtnRel().then((()=>{this.onBtnPos().then((()=>{console.log("Marlin: onSerialConnected init sequence finished")}))}))}))}),3e3)}onSerialDisconnected(){console.log("Marlin: onSerialDisconnected"),this.marlinDivStatus&&this.marlinDivCommands&&(this.setStatus(c.NC),this.marlinDivCommands.className=this.marlinDivCommands.className.replace("w3-show","w3-hide"))}async serialWriteWait(t,e=1e4){return new Promise((async(s,i)=>{this.setStatus(c.Busy),super.serialWriteWait(t,e).then((t=>{s(t)})).catch((t=>{i(t)})).finally((()=>{this.setStatus(c.Ready)}))}))}setStatus(t){let e=`unknown status ${t}`;switch(t){case c.Ready:e='Status: <i class="fa-solid fa-plug"></i> ready';break;case c.Busy:e='Status: <i class="fa-solid fa-plug-circle-bolt"></i> busy';break;case c.NC:e='Status: <i class="fa-solid fa-plug-circle-xmark"></i> not connected'}this.marlinDivStatus&&(this.marlinDivStatus.innerHTML=e)}onBtnHome(){return new Promise((t=>{this.serialWriteWait("G28").then((t=>{console.log(t)})).catch((t=>{console.warn(t)})).finally((()=>{t()}))}))}onBtnPos(){return new Promise((t=>{this.serialWriteWait("M114").then((t=>{console.log("onBtnPos",t),this.marlinDivPosition&&(this.marlinDivPosition.innerText=t)})).catch((t=>{console.warn(t)})).finally((()=>{t()}))}))}onBtnAbs(){return new Promise((t=>{this.serialWriteWait("G90").then((t=>{console.log(t)})).catch((t=>{console.warn(t)})).finally((()=>{t()}))}))}onBtnRel(){return new Promise((t=>{this.serialWriteWait("G91").then((t=>{console.log(t)})).catch((t=>{console.warn(t)})).finally((()=>{t()}))}))}onBtnCold(){return new Promise((t=>{this.serialWriteWait("M302 S0").then((t=>{console.log(t)})).catch((t=>{console.warn(t)})).finally((()=>{t()}))}))}onBtnXP(){this.serialWriteWait("G0 X10").then((t=>{this.onBtnPos()}))}onBtnXM(){this.serialWriteWait("G0 X-10").then((t=>{this.onBtnPos()}))}onBtnYP(){this.serialWriteWait("G0 Y10").then((t=>{this.onBtnPos()}))}onBtnYM(){this.serialWriteWait("G0 Y-10").then((t=>{this.onBtnPos()}))}onBtnZP(){this.serialWriteWait("G0 Z10").then((t=>{this.onBtnPos()}))}onBtnZM(){this.serialWriteWait("G0 Z-10").then((t=>{this.onBtnPos()}))}onBtnEP(){this.serialWriteWait("G0 E10").then((t=>{this.onBtnPos()}))}onBtnEM(){this.serialWriteWait("G0 E-10").then((t=>{this.onBtnPos()}))}initHtml(){if(this.marlinDiv){this.marlinDiv.innerHTML='\n            <div class="w3-border w3-border-dark-grey">\n            <div id="marlinStatus"></div>\n            <div id="marlinPosition" class="w3-tiny"></div>\n            <div id="marlinCommands" class="w3-tiny w3-hide">\n            <p>\n            <button id="marlinHome" class="w3-button w3-round w3-light-grey">home</button>\n            <button id="marlinPos"  class="w3-button w3-round w3-light-grey">pos?</button>\n            <button id="marlinRel"  class="w3-button w3-round w3-light-grey">rel</button>\n            <button id="marlinAbs"  class="w3-button w3-round w3-light-grey">abs</button>\n            <button id="marlinCold" class="w3-button w3-round w3-light-grey">cold</button>\n            </p>\n            <p>\n            <button id="marlinXP" class="w3-button w3-round w3-light-grey">x+</button>\n            <button id="marlinXM" class="w3-button w3-round w3-light-grey">x-</button>\n            <button id="marlinYP" class="w3-button w3-round w3-light-grey">y+</button>\n            <button id="marlinYM" class="w3-button w3-round w3-light-grey">y-</button>\n            <button id="marlinZP" class="w3-button w3-round w3-light-grey">z+</button>\n            <button id="marlinZM" class="w3-button w3-round w3-light-grey">z-</button>\n            </p>\n            <p>\n            <button id="marlinEP" class="w3-button w3-round w3-light-grey">e+</button>\n            <button id="marlinEM" class="w3-button w3-round w3-light-grey">e-</button>\n            </p>\n            </div>\n            </div>\n            ',this.marlinDivStatus=document.getElementById("marlinStatus"),this.marlinDivPosition=document.getElementById("marlinPosition"),this.marlinDivCommands=document.getElementById("marlinCommands"),this.setStatus(c.NC);const t=document.getElementById("marlinHome");t&&(t.onclick=this.onBtnHome.bind(this));const e=document.getElementById("marlinPos");e&&(e.onclick=this.onBtnPos.bind(this));const s=document.getElementById("marlinRel");s&&(s.onclick=this.onBtnRel.bind(this));const i=document.getElementById("marlinAbs");i&&(i.onclick=this.onBtnAbs.bind(this));const o=document.getElementById("marlinCold");o&&(o.onclick=this.onBtnCold.bind(this));const n=document.getElementById("marlinXP");n&&(n.onclick=this.onBtnXP.bind(this));const r=document.getElementById("marlinXM");r&&(r.onclick=this.onBtnXM.bind(this));const l=document.getElementById("marlinYP");l&&(l.onclick=this.onBtnYP.bind(this));const h=document.getElementById("marlinYM");h&&(h.onclick=this.onBtnYM.bind(this));const a=document.getElementById("marlinZP");a&&(a.onclick=this.onBtnZP.bind(this));const d=document.getElementById("marlinZM");d&&(d.onclick=this.onBtnZM.bind(this));const u=document.getElementById("marlinEP");u&&(u.onclick=this.onBtnEP.bind(this));const m=document.getElementById("marlinEM");m&&(m.onclick=this.onBtnEM.bind(this))}}};function R(){N=void 0,g&&(g.innerHTML="")}function Z(){x&&L&&(window.requestAnimationFrame(Z),L.setTransform(F?F.zoom:1,0,0,F?F.zoom:1,0,0),L.clearRect(0,0,x.width,x.height),W.lines.forEach((t=>t.draw(L))),D.draw(),L.setTransform(1,0,0,-1,0,x.height),F&&F.draw())}async function j(t){if(p&&w&&L&&x&&S&&P&&z&&y){F=new a,F.setCanvas(L,x);let e=new m(F);p.innerHTML="",w.innerHTML="",y.innerText=t.name,S.style.display="block",e.padsField=p,e.coordsField=w,z.onclick=()=>{e.cancel()},e.processCB=t=>{P&&(P.style.width=`${t}%`)},await e.parseFile(t),F.zoomToFit([x.width,x.height]),S.style.display="none"}}globalThis.accordionToggler=t=>{var e=document.getElementById(t);e?-1==e.className.indexOf("w3-show")&&-1==e.className.indexOf("w3-hide")?e.className+=" w3-show":-1!=e.className.indexOf("w3-show")?e.className=e.className.replace("w3-show","w3-hide"):e.className=e.className.replace("w3-hide","w3-show"):console.warn("accordionToggler no elem with id:",t),globalThis.resize()},globalThis.openSidebar=()=>{E&&T&&C&&(E.style.marginRight="350px",T.style.width="350px",T.style.display="block",C.style.display="none")},globalThis.closeSidebar=()=>{E&&T&&C&&(E.style.marginRight="0px",T.style.display="none",C.style.display="inline-block")},globalThis.zoomToFit=()=>{F&&x&&F.zoomToFit([x.width,x.height])},globalThis.rotateRight=()=>{var t;t="müsste ma einer implementieren, ne",N&&window.clearTimeout(N),g&&(g.innerHTML=`${t}`,N=window.setTimeout(R,1e4))},globalThis.resize=()=>{if(x&&I&&M&&T&&v){x.width=innerWidth,x.height=innerHeight-I.getBoundingClientRect().height-M.getBoundingClientRect().height,D.draw(),W.draw(L,x);let t=innerHeight-M.getBoundingClientRect().height,e=0;for(let t of T.children){let s=t;-1==s.className.indexOf("w3-hide")&&(e+=s.clientHeight)}-1!=v.className.indexOf("w3-hide")?(T.style.height=`${e+16}px`,v.style.height="16px"):(e-=v.getBoundingClientRect().height,T.style.height=`${t}px`,v.style.height=t-e-16+"px")}},document.addEventListener("DOMContentLoaded",(function(){b&&k&&X&&Y&&O&&z&&p&&w&&f&&x&&M?(L=x.getContext("2d"),x.addEventListener("mousemove",(t=>{F&&F.mouseMove(t),t.preventDefault()}),!1),x.addEventListener("mousedown",(t=>{F&&F.mouseDown(t),t.preventDefault()}),!1),x.addEventListener("mouseup",(t=>{F&&F.mouseUp(t),t.preventDefault()}),!1),x.addEventListener("mouseout",(t=>{F&&F.mouseOut(t),t.preventDefault()}),!1),x.addEventListener("wheel",(t=>{F&&F.mouseWheel(t),t.preventDefault()}),!1),b.onclick=()=>{var t=document.createElement("input");return t.type="file",t.click(),t.addEventListener("change",(e=>{if(console.log(e),t.files&&t.files.length>0){let e=t.files[0];console.log(e),console.log(`file: ${e.name} size:${e.size}`),j(e)}else alert("please choose a file")})),!1},k.onclick=t=>{B&&(B.className=B.className.replace("w3-show","w3-hide")),F.setZero(),$.setZero(F.getZero())},X.onclick=t=>{B&&(B.className=B.className.replace("w3-show","w3-hide"));let e=F.getSelectedZero();$.moveTo(e[0],e[1],void 0,void 0)},Y.onclick=t=>{B&&(B.className=B.className.replace("w3-show","w3-hide"));let e=F.getSelected(),s=F.getSelectedZero();$.moveToAll(e,s)},O.onclick=()=>{B&&(B.className=B.className.replace("w3-show","w3-hide")),$.blob()},f.ondrop=t=>{t.preventDefault(),console.log(t),t.dataTransfer&&t.dataTransfer.items?[...t.dataTransfer.items].forEach(((t,e)=>{if("file"===t.kind){const s=t.getAsFile();s&&(console.log(`… item[${e}].name = ${s.name}`),j(s))}})):t.dataTransfer&&[...t.dataTransfer.files].forEach(((t,e)=>{t&&(console.log(`… file[${e}].name = ${t.name}`),j(t))}))},f.ondragover=t=>{console.log("File(s) in drop zone"),t.preventDefault()},x.oncontextmenu=t=>{t.preventDefault(),B&&(B.style.left=`${t.pageX}px`,B.style.top=`${t.pageY}px`,B.className=B.className.replace("w3-hide","w3-show"))},x.onmouseup=t=>{B&&(B.className=B.className.replace("w3-show","w3-hide"))},L&&(F=new a,F.setCanvas(L,x),D=new(0,s.Mouse)(L,x),D.track(),W=new(0,s.Grid),W.step=2,W.lineWidth=.03,W.boldWidth=.05,W.createLines(x)),globalThis.resize(),window.requestAnimationFrame(Z)):console.error("missing html elements !")})),window.addEventListener("resize",(t=>{globalThis.resize()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
