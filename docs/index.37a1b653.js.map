{"mappings":"AAAAA,QAAQC,IAAI,WAEZ,MAAMC,EAAkEC,SAASC,eAAe,aAC1FC,EAAmEF,SAASC,eAAe,gBAC3FE,EAA0DH,SAASC,eAAe,aAClFG,EAA4DJ,SAASC,eAAe,eAEpFI,EAAyDL,SAASC,eAAe,YAoDvF,SAASK,EAAkBC,GACvBA,EAAKC,cAAcC,MAAMC,IAqE7B,IAAqCC,EAAUC,EACvCC,EACAC,EAF6BH,EApEJ,QAoEcC,EApEJG,IAC/BlB,QAAQC,IAAIiB,GAGZ,MAAMC,GADND,EAAOA,EAAKE,QAAQ,MAAO,KACRC,MAAM,MACzB,IAAIC,EAAc,EACdC,EAAa,EACbC,EAAU,GACd,IAAK,IAAIC,KAAQN,EAAO,CAQpB,MAAMO,EAAiBD,EAAKE,MAAM,4CAC/BD,IAECH,EAAaK,SAASF,EAAe,IACrCJ,EAAcM,SAASF,EAAe,IACtC1B,QAAQC,IAAI,kBAAkBsB,KAAcD,MAIhD,MAAMO,EAAWJ,EAAKE,MAAM,qDAExBE,IACAvB,EAAUwB,WAAa,GAAGD,EAAS,MAAMA,EAAS,MAAMA,EAAS,UAIrE,MAAME,EAAgBN,EAAKE,MAAM,mCAC3BK,EAAoBP,EAAKE,MAAM,iBAKrC,GAJGK,IAECR,EAAUQ,EAAkB,IAE7BD,EAAe,CAEd,IAAIE,EAAKF,EAAc,GACnBG,EAAKH,EAAc,GACvB,MAAMI,EAAMZ,EAAWD,EAEvB,KAAMW,EAAGG,OAASD,GACdF,EAAK,IAAIA,IAEb,KAAMC,EAAGE,OAASD,GACdD,EAAK,IAAIA,IAGb,IAAIG,EAAK,EACLC,EAAK,EACTL,EAAK,GAAGA,EAAGM,UAAU,EAAEhB,MAAeU,EAAGM,UAAUhB,KACnDW,EAAK,GAAGA,EAAGK,UAAU,EAAEhB,MAAeW,EAAGK,UAAUhB,KACnDc,EAAKG,WAAWP,GAChBK,EAAKE,WAAWN,GAChB3B,EAAYuB,WAAa,GAAGN,SAAea,OAAQC,QACvD,CAEJ,GASJtB,EAAO,IAAIyB,KAAK,CArEI5B,GAqEM,CAAE6B,KAAM,gBAClCzB,EAAS,IAAI0B,YACVC,OAAUC,IAAU9B,EAAS8B,EAAIC,OAAOC,OAAM,EACrD9B,EAAO+B,WAAWhC,EAAMF,EAXpB,GAGR,CApHIZ,GAAiBG,GAAgBC,GAAaC,GAAeC,IAC7DH,EAAa4C,QAAU,KAEnB,GAAI/C,EAAcgD,OAAShD,EAAcgD,MAAMd,OAAS,EAAG,CACvD,IAAI1B,EAAOR,EAAcgD,MAAM,GAC/BlD,QAAQC,IAAIS,GACZV,QAAQC,IAAI,SAASS,EAAKyC,aAAazC,EAAK0C,QAE5C3C,EAAkBC,EAEtB,MACI2C,MAAM,uBAEV,EAGJ7C,EAAS8C,OAAUC,IACfA,EAAGC,iBACHxD,QAAQC,IAAIsD,GACRA,EAAGE,aAAaC,MAEhB,IAAIH,EAAGE,aAAaC,OAAOC,SAAQ,CAACC,EAAMC,KAEtC,GAAkB,SAAdD,EAAKE,KAAiB,CACtB,MAAMpD,EAAOkD,EAAKG,YACfrD,IACCV,QAAQC,IAAI,UAAU4D,aAAanD,EAAKyC,QACxC1C,EAAkBC,GAE1B,KAIJ,IAAI6C,EAAGE,aAAaP,OAAOS,SAAQ,CAACjD,EAAMmD,KACnCnD,IACCV,QAAQC,IAAI,UAAU4D,aAAanD,EAAKyC,QACxC1C,EAAkBC,GACtB,GACR,EAGJF,EAASwD,WAAcT,IACnBvD,QAAQC,IAAI,wBAGZsD,EAAGC,gBAAc","sources":["src/index.ts"],"sourcesContent":["console.log('moinsen')\r\n\r\nconst uploadFileEle: HTMLInputElement | null = <HTMLInputElement | null>document.getElementById(\"fileInput\");\r\nconst uploadButton: HTMLButtonElement | null = <HTMLButtonElement | null>document.getElementById(\"uploadButton\");\r\nconst padsField: HTMLDivElement | null = <HTMLDivElement | null>document.getElementById(\"padsField\");\r\nconst coordsField: HTMLDivElement | null = <HTMLDivElement | null>document.getElementById(\"coordsField\");\r\n\r\nconst dropZone: HTMLDivElement | null = <HTMLDivElement | null>document.getElementById(\"dropZone\");\r\n\r\nif (uploadFileEle && uploadButton && padsField && coordsField && dropZone) {\r\n    uploadButton.onclick = () => {\r\n        // check if user had selected a file\r\n        if (uploadFileEle.files && uploadFileEle.files.length > 0) {\r\n            let file = uploadFileEle.files[0]\r\n            console.log(file);\r\n            console.log(`file: ${file.name} size:${file.size}`);\r\n\r\n            processGerberFile(file);\r\n\r\n        } else {\r\n            alert('please choose a file')\r\n            return\r\n        }\r\n    }\r\n\r\n    dropZone.ondrop = (ev) => {\r\n        ev.preventDefault();\r\n        console.log(ev);\r\n        if (ev.dataTransfer.items) {\r\n            // Use DataTransferItemList interface to access the file(s)\r\n            [...ev.dataTransfer.items].forEach((item, i) => {\r\n                // If dropped items aren't files, reject them\r\n                if (item.kind === 'file') {\r\n                    const file = item.getAsFile();\r\n                    if(file) {\r\n                        console.log(`… item[${i}].name = ${file.name}`);\r\n                        processGerberFile(file);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // Use DataTransfer interface to access the file(s)\r\n            [...ev.dataTransfer.files].forEach((file, i) => {\r\n                if(file) {\r\n                    console.log(`… file[${i}].name = ${file.name}`);\r\n                    processGerberFile(file);\r\n                }\r\n        });\r\n        }\r\n    }\r\n    dropZone.ondragover = (ev) => {\r\n        console.log('File(s) in drop zone');\r\n\r\n        // Prevent default behavior (Prevent file from being opened)\r\n        ev.preventDefault();\r\n    }\r\n\r\n}\r\n\r\nfunction processGerberFile(file: File) {\r\n    file.arrayBuffer().then((buf) => {\r\n        arrayBufferToString(buf, 'UTF-8', (text: string) => {\r\n            console.log(text);\r\n            // translate line ends...\r\n            text = text.replace(/\\r/g, ''); // remove windows trash\r\n            const lines = text.split('\\n');\r\n            let floatFracts = 1;\r\n            let floatDezis = 1;\r\n            let lastPad = \"\";\r\n            for (let line of lines) {\r\n                // line = line.replace(/\\n/g,'<br>');\r\n\r\n                // Zahlenformat info line \"%FSLAX34Y34*%\"\r\n                //   %FSLAX25Y25*% Coordinate format specification:\r\n                //   Coordinates format is 2.5:\r\n                //   2 digits in the integer part\r\n                //   5 digits in the fractional part\r\n                const matchNumFormat = line.match(/^%FSLAX([0-9])([0-9])Y([0-9])([0-9])[*]%/);\r\n                if(matchNumFormat) {\r\n                    // console.log(matchNumFormat);\r\n                    floatDezis = parseInt(matchNumFormat[1]);\r\n                    floatFracts = parseInt(matchNumFormat[2]);\r\n                    console.log(`float digits = ${floatDezis} ${floatFracts}`);\r\n                }\r\n\r\n                // check for pad definitions\r\n                const matchPad = line.match(/^(%AD)(D[0-9]+)([A-Za-z])[,]([0-9.]+)[X]([0-9.]+)/);///);\r\n                // console.log(matchPad);\r\n                if (matchPad) {\r\n                    padsField.innerHTML += `${matchPad[2]} ${matchPad[4]} ${matchPad[5]}<br>`;\r\n                }\r\n\r\n                // a pad line: \"X379984Y963930D03*\"\r\n                const matchPadCoord = line.match(/^X([0-9]+)Y([0-9]+)D([0-9]+)[*]/);///);\r\n                const matchPadCoordInit = line.match(/^(D[0-9]+)[*]/);///);\r\n                if(matchPadCoordInit) {\r\n                    // console.log(matchPadCoordInit);\r\n                    lastPad = matchPadCoordInit[1];\r\n                }\r\n                if(matchPadCoord) {\r\n                    // console.log(matchPadCoord);\r\n                    let sx = matchPadCoord[1];\r\n                    let sy = matchPadCoord[2];\r\n                    const len = floatDezis+floatFracts;\r\n                    // fill freak's leading zeros\r\n                    while(sx.length < len) {\r\n                        sx = `0${sx}`;\r\n                    }\r\n                    while(sy.length < len) {\r\n                        sy = `0${sy}`;\r\n                    }\r\n                    // make a freak'n float\r\n                    let fx = 0.0;\r\n                    let fy = 0.0;\r\n                    sx = `${sx.substring(0,floatDezis)}.${sx.substring(floatDezis)}`;\r\n                    sy = `${sy.substring(0,floatDezis)}.${sy.substring(floatDezis)}`;\r\n                    fx = parseFloat(sx);\r\n                    fy = parseFloat(sy);\r\n                    coordsField.innerHTML += `${lastPad}:  x:${fx} y:${fy} <br>`;\r\n                }\r\n\r\n            }\r\n        });\r\n    })\r\n\r\n}\r\n\r\n// found on se web...\r\n\r\nfunction arrayBufferToString(buffer, encoding, callback) {\r\n    var blob = new Blob([buffer], { type: 'text/plain' });\r\n    var reader = new FileReader();\r\n    reader.onload = (evt) => { callback(evt.target.result); };\r\n    reader.readAsText(blob, encoding);\r\n}\r\n\r\nfunction stringToArrayBuffer(string, encoding, callback) {\r\n    var blob = new Blob([string], { type: 'text/plain;charset=' + encoding });\r\n    var reader = new FileReader();\r\n    reader.onload = (evt) => { callback(evt.target.result); };\r\n    reader.readAsArrayBuffer(blob);\r\n}\r\n"],"names":["console","log","$b4e14b6b8da86996$var$uploadFileEle","document","getElementById","$b4e14b6b8da86996$var$uploadButton","$b4e14b6b8da86996$var$padsField","$b4e14b6b8da86996$var$coordsField","$b4e14b6b8da86996$var$dropZone","$b4e14b6b8da86996$var$processGerberFile","file","arrayBuffer","then","buf","encoding","callback","blob","reader","text","lines","replace","split","floatFracts","floatDezis","lastPad","line","matchNumFormat","match","parseInt","matchPad","innerHTML","matchPadCoord","matchPadCoordInit","sx","sy","len","length","fx","fy","substring","parseFloat","Blob","type","FileReader","onload","evt","target","result","readAsText","onclick","files","name","size","alert","ondrop","ev","preventDefault","dataTransfer","items","forEach","item","i","kind","getAsFile","ondragover"],"version":3,"file":"index.37a1b653.js.map"}